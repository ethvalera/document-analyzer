openapi: 3.0.2
info:
  contact:
    email: ethvalera@gmail.com
    name: Elisabeth Valera
  description: |
    Document Analyzer is an application that tracks and analyzes text documents uploaded by users.
    The application provides functionality to:
    - Counts users registered before a given period who did not upload documents during that period.
    - Calculates word frequencies for specific documents.
    - Suggests synonyms for the longest word in a text document.
  title: Document Analyzer
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /teams:
    get:
      summary: List all teams
      operationId: getAllTeams
      tags:
        - Teams
      responses:
        200:
          description: A list of all teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/team"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"
    post:
      summary: Create a new team
      operationId: createTeam
      tags:
        - Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the Team item
                  example: Healthcare
              required:
                - name
      responses:
        201:
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        400:
          description: Invalid request - invalid data or missing mandatory parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestError"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"

  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: Request to create user with email and teams
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestError'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conflictRequestError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"

  /users/inactive:
    get:
      summary: Get number of users who registered before a date and did not upload documents within a time period
      description: Returns the number of users who were registered before the specified date and have not uploaded any documents between the start and end dates.
      operationId: getInactiveUsers
      tags:
        - Users
      parameters:
        - name: startDate
          in: query
          description: The start date of the period to check for document uploads (ISO 8601 format).
          required: true
          schema:
            type: string
            format: date
            example: "2024-02-26"
        - name: endDate
          in: query
          description: The end date of the period to check for document uploads (ISO 8601 format).
          required: true
          schema:
            type: string
            format: date
            example: "2025-02-26"
      responses:
        '200':
          description: Count of inactive users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inactiveUsersResponse'
              example:
                inactiveUserCount: 42
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"

  /documents:
    get:
      summary: List all documents
      operationId: getAllDocuments
      tags:
        - Documents
      responses:
        200:
          description: A list of all documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/document"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"

  /documents/{documentId}/word-frequencies:
    get:
      summary: Get word frequencies of a document
      description: Returns the top 10 words by frequency in the given document, excluding ("The, Me, You, I, Of, And, A, We").
      operationId: getWordFrequencies
      tags:
        - Documents
      parameters:
        - name: documentId
          in: path
          description: The ID of the document to analyze.
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        200:
          description: A list of top 10 words and their frequencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/wordFrequency'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestError'
        404:
          description: Document ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFoundError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"

  /documents/{documentId}/longest-word-synonyms:
    get:
      summary: Get synonyms for the longest word in a given document
      description: Returns the longest word in the given document and synonyms - excludes ("The, Me, You, I, Of, And, A, We").
      operationId: getLongestWordSynonyms
      tags:
        - Documents
      parameters:
        - name: documentId
          in: path
          description: The ID of the document to analyze.
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        200:
          description: The longest word and its synonyms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/longestWordSynonyms'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestError'
        404:
          description: Document ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFoundError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerError"

components:
  schemas:
    team:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Healthcare
      required:
        - id
        - name
      example:
        id: 1
        name: Healthcare

    user:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: "elisabeth@gmail.com"
        createdAt:
          type: string
          format: date-time
          x-java-type: java.time.Instant
          example: "2025-02-24T12:00:00Z"
        teams:
          type: array
          items:
            $ref: '#/components/schemas/team'

    document:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Report.txt
        wordCount:
          type: integer
          example: 1233
        uploadedAt:
          type: string
          format: date-time
          x-java-type: java.time.Instant
          example: "2025-02-24T12:00:00Z"
        userId:
          type: integer
          format: int64
          example: 1
      required:
        - id
        - name
        - wordCount
        - uploadedAt
        - userId
      example:
        id: 1
        name: Healthcare

    wordFrequency:
      type: object
      properties:
        word:
          type: string
          example: "contract"
        count:
          type: integer
          format: int64
          example: 45
      required:
        - word
        - count
      example:
        word: "contract"
        count: 45

    longestWordSynonyms:
      type: object
      properties:
        longestWord:
          type: string
          description: The longest word
          example: "administration"
        synonyms:
          type: array
          description: List of synonyms for the longest word
          items:
            type: string
          example: [ "management", "government", "governance", "organization", "leadership" ]
      required:
        - longestWord
        - synonyms

    createUserRequest:
      type: object
      required:
        - email
        - teams
      properties:
        email:
          type: string
          format: email
          example: "elisabeth@gmail.com"
        teams:
          type: array
          items:
            type: string
          example: [ "Healthcare", "Finance" ]

    inactiveUsersResponse:
      type: object
      properties:
        inactiveUserCount:
          type: integer
          description: The number of users who registered before 'registeredBefore' and did not upload a document between 'startDate' and 'endDate'.
      required:
        - inactiveUserCount

    internalServerError:
      type: object
      properties:
        status:
          type: integer
          example: 500
          description: The HTTP status code
        message:
          type: string
          example: "An unexpected error occurred"
          description: An error message
      required:
        - status
        - message
      example:
        status: 500
        message: "An unexpected error occurred"

    badRequestError:
      type: object
      properties:
        status:
          type: integer
          example: 400
          description: The HTTP status code
        message:
          type: string
          example: "Invalid parameter"
          description: An error message
      required:
        - status
        - message
      example:
        status: 400
        message: "Invalid parameter"

    conflictRequestError:
      type: object
      properties:
        status:
          type: integer
          example: 409
          description: The HTTP status code
        message:
          type: string
          example: "Parameter already exists"
          description: An error message
      required:
        - status
        - message
      example:
        status: 409
        message: "Parameter already exists"

    notFoundError:
      type: object
      properties:
        status:
          type: integer
          example: 404
          description: The HTTP status code
        message:
          type: string
          example: "ID not found"
          description: An error message
      required:
        - status
        - message
      example:
        status: 404
        message: "ID not found"